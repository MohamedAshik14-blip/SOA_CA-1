@page "/tripplanner"
@using WeatherApp.Models
@using WeatherApp.Services
@inject IWeatherService WeatherService
@inject ICountryService CountryService
@inject CitySuggestionService CityService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject ILocationService LocationService

<link href="css/tripplanner.css" rel="stylesheet" />

<div class="app-container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="page-title">üåç Trip Planner</h2>
        <div class="d-flex align-items-center">
            <input @bind="searchCountry" @bind:event="oninput"
                   placeholder="Search city or country (e.g., Dublin or Ireland)"
                   class="form-control search-input me-2" />
            <button class="btn btn-primary me-2" @onclick="SearchCountryOrCity">Search</button>
            <button class="btn btn-outline-secondary" @onclick="ToggleFavorites">@((showFavorites) ? "Hide" : "Favorites")</button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    else if (loading)
    {
        <div class="d-flex align-items-center py-5 justify-content-center">
            <div class="spinner-border me-3" role="status"></div>
            <div>Loading trip info...</div>
        </div>
    }
    else if (countryInfo != null)
    {
        <div class="trip-card mb-3">
            <div class="d-flex justify-content-between align-items-start">
                <div>
                    <h4 class="country-name">üè≥Ô∏è @countryInfo.Name.Common</h4>
                    <div class="muted">@countryInfo.Region</div>
                    <div class="muted">Capital: @countryInfo.Capital?.FirstOrDefault()</div>
                    <div class="muted">Population: @String.Format("{0:N0}", countryInfo.Population)</div>
                </div>

                <div class="text-end">
                    @if (!string.IsNullOrEmpty(countryInfo.Flags.Png))
                    {
                        <img src="@countryInfo.Flags.Png" width="120" alt="flag" class="flag-img" />
                    }
                    <div class="mt-2">
                        <button class="btn btn-success" @onclick="SaveFavorite">‚≠ê Save Favorite</button>
                    </div>
                </div>
            </div>

            <hr />
 <div class="row mb-3 gx-4">
                <div class="col-lg-4">
                   
                    <div class="filters-panel p-3">
                        <h6 class="mb-3">Filters</h6>

                        <label class="form-label small">Temperature (¬∞C)</label>
                        <div class="d-flex gap-2 mb-3">
                            <input type="number" class="form-control" @bind="minTemp" />
                            <input type="number" class="form-control" @bind="maxTemp" />
                        </div>

                        <label class="form-label small">Weather Type</label>
                        <select class="form-select mb-3" @bind="selectedWeather">
                            <option value="">Any</option>
                            <option value="Sunny">Sunny</option>
                            <option value="Cloudy">Cloudy</option>
                            <option value="Rainy">Rainy</option>
                            <option value="Snowy">Snowy</option>
                        </select>

                        <label class="form-label small">Max distance (km): <strong>@maxDistanceKm</strong></label>
                        <input type="range" min="10" max="20000" step="10" class="form-range mb-3" @bind="maxDistanceKm" />

                        <label class="form-label small">Sort by</label>
                        <select class="form-select mb-3" @bind="sortBy">
                            <option value="population">Population (desc)</option>
                            <option value="distance">Distance (asc)</option>
                            <option value="temperature">Temperature (asc)</option>
                        </select>

                        <div class="d-flex gap-2">
                            <button class="btn btn-secondary btn-sm" @onclick="ApplyFilters">Apply</button>
                            <button class="btn btn-outline-secondary btn-sm" @onclick="ResetFilters">Reset</button>
                        </div>
                    </div>
                </div>
   <div class="col-lg-8">
                 
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h6 class="mb-0">Top cities (@filteredCities?.Count())</h6>
                        <div class="small text-muted">Showing @displayCount of @enrichedCities.Count</div>
                    </div>

                    @if (filteredCities?.Any() != true)
                    {
                        <div class="empty-state p-4 text-center rounded">No matching cities ‚Äî try adjusting filters.</div>
                    }
                    else
                    {
                        <div class="city-grid">
                            @foreach (var item in filteredCities.Take(displayCount))
                            {
                                <div class="city-card">
                                    <div class="city-card-header d-flex justify-content-between">
                                        <div>
                                            <div class="city-name">@item.City.Name</div>
                                            <div class="small text-muted">@item.City.AdminName1</div>
                                        </div>
                                        <div class="text-end">
                                            <div class="city-pop">POP @item.City.Population</div>
                                            <div class="small text-muted">@item.City.CountryName</div>
                                        </div>
                                    </div>

                                    <div class="city-card-body mt-2">
                                        <div class="d-flex align-items-center gap-3 mb-2">
                                            <div class="weather-pill">@item.Weather.Type</div>
                                            <div class="temp-large">@item.Weather.TemperatureC.ToString("0.0")¬∞C</div>
                                            <div class="small text-muted">@item.Weather.Description</div>
                                        </div>

                                        <div class="d-flex justify-content-between align-items-center mt-2">
                                            <div class="small text-muted">Distance</div>
                                            <div class="fw-bold">@Math.Round(item.DistanceKm, 1) km</div>
                                        </div>

                                        <div class="mt-3 d-flex justify-content-between">
                                            <button class="btn btn-outline-primary btn-sm" @onclick="() => ShowCityDetails(item)">Details</button>
                                            <button class="btn btn-outline-danger btn-sm" @onclick="() => AddCityFavorite(item.City.Name)">Fav</button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        @if (displayCount < filteredCities.Count)
                        {
                            <div class="text-center mt-3">
                                <button class="btn btn-outline-primary" @onclick="LoadMore">Show more</button>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    }
  @if (showFavorites)
    {
        <div class="trip-card favorites-panel">
            <h5>‚≠ê Favorites</h5>
            @if (favorites?.Any() == true)
            {
                <div class="list-group">
                    @foreach (var fav in favorites)
                    {
                        <div class="list-group-item d-flex justify-content-between align-items-center">
                            <div class="fav-text" @onclick="() => LoadCountry(fav)">@fav</div>
                            <div>
                                <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => LoadCountry(fav)">Open</button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveFavorite(fav)">Remove</button>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="p-3 text-muted">No favorites saved</div>
            }
        </div>
    }

@code {
    private record CityWithWeather(GeoCityDto City, WeatherInfo Weather, double DistanceKm);

    private string searchCountry = "";
    private CountryInfo? countryInfo;
    private WeatherInfo? currentWeather;
    private List<WeatherInfo> forecast = new();
    private List<string> favorites = new();
    private List<GeoCityDto> topCities = new();
    private List<CityWithWeather> enrichedCities = new();
    private List<CityWithWeather> filteredCities = new();
    private TripLocation userLocation = new();

    private string? capitalName;
    private string? errorMessage;
    private bool loading = false;
    private bool showFavorites = false;

    private int pageSize = 6;
    private int displayCount = 6;

    private double minTemp = -50;
    private double maxTemp = 50;
    private string selectedWeather = "";
    private int maxDistanceKm = 20000;
    private string sortBy = "population";

  
    private bool showDetails = false;
    private CityWithWeather? selectedCity;
    private List<WeatherInfo> cityForecast = new();

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        try
        {
            userLocation = await LocationService.GetUserLocationAsync();
            searchCountry = userLocation.Country;
            await SearchCountryOrCity();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to get location: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task SearchCountryOrCity()
    {
        if (string.IsNullOrWhiteSpace(searchCountry)) return;
        loading = true;
        errorMessage = null;
        enrichedCities.Clear();
        filteredCities.Clear();
        displayCount = pageSize;

        try
        {
          
            countryInfo = await CountryService.GetCountryInfoAsync(searchCountry);

            if (countryInfo != null)
            {
                capitalName = countryInfo.Capital?.FirstOrDefault();
                if (!string.IsNullOrEmpty(capitalName))
                {
                    currentWeather = await WeatherService.GetCurrentWeatherAsync(capitalName);
                    forecast = await WeatherService.GetForecastAsync(currentWeather.Latitude, currentWeather.Longitude);
                }

                var code = !string.IsNullOrEmpty(countryInfo.Cca2)
                    ? countryInfo.Cca2
                    : ExtractCountryCode(countryInfo.Name.Common);

                topCities = await CityService.GetTopCitiesAsync(code, max: 100);
            }
            else
            {
               
                var w = await WeatherService.GetCurrentWeatherAsync(searchCountry);
                if (w != null)
                {
                    countryInfo = new CountryInfo
                    {
                        Name = new() { Common = searchCountry },
                        Capital = new List<string> { searchCountry },
                        Population = 0,
                        Flags = new Flags { Png = "" },
                        Region = "N/A"
                    };
                    topCities = new List<GeoCityDto>
                    {
                        new GeoCityDto
                        {
                            Name = searchCountry,
                            Latitude = w.Latitude,
                            Longitude = w.Longitude,
                            CountryName = "N/A",
                            Population = 0,
                            CountryCode = "",
                            AdminName1 = ""
                        }
                    };
                }
            }

            if (topCities.Any())
            {
                var tasks = topCities.Select(city => EnrichCityAsync(city)).ToArray();
                var results = await Task.WhenAll(tasks);
                enrichedCities = results.Where(r => r != null).Select(r => r!).ToList();
                ApplyFilters();
            }

            favorites = await LocalStorage.GetItemAsync<List<string>>("favorites") ?? new();
        }
        catch (Exception ex)
        {
            errorMessage = $"Search failed: {ex.Message}";
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }
 private async Task<CityWithWeather?> EnrichCityAsync(GeoCityDto city)
    {
        try
        {
            var query = $"{city.Name},{city.CountryCode}";
            var w = await WeatherService.GetCurrentWeatherAsync(query);
            if (w == null) return null;
            var dist = GetDistanceKm(userLocation.Latitude, userLocation.Longitude, city.Latitude, city.Longitude);
            return new CityWithWeather(city, w, dist);
        }
        catch { return null; }
    }

    private void ApplyFilters()
    {
        var q = enrichedCities.AsEnumerable()
            .Where(c => c.Weather.TemperatureC >= minTemp && c.Weather.TemperatureC <= maxTemp)
            .Where(c => string.IsNullOrEmpty(selectedWeather) || c.Weather.Type.ToString() == selectedWeather)
            .Where(c => c.DistanceKm <= maxDistanceKm);

        q = sortBy switch
        {
            "distance" => q.OrderBy(c => c.DistanceKm),
            "temperature" => q.OrderBy(c => c.Weather.TemperatureC),
            _ => q.OrderByDescending(c => c.City.Population)
        };

        filteredCities = q.ToList();
        StateHasChanged();
    }

private void ResetFilters()
    {
        minTemp = -50;
        maxTemp = 50;
        selectedWeather = "";
        maxDistanceKm = 20000;
        sortBy = "population";
        ApplyFilters();
    }

    private void LoadMore() => displayCount = Math.Min(filteredCities.Count, displayCount + pageSize);

    private async Task ShowCityDetails(CityWithWeather item)
    {
        selectedCity = item;
        cityForecast = await WeatherService.GetForecastAsync(item.City.Latitude, item.City.Longitude);
        showDetails = true;
        StateHasChanged();
    }

    private double GetDistanceKm(double lat1, double lon1, double lat2, double lon2)
    {
        static double ToRad(double deg) => deg * Math.PI / 180.0;
        const double R = 6371.0;
        var dLat = ToRad(lat2 - lat1);
        var dLon = ToRad(lon2 - lon1);
        var a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2)
                + Math.Cos(ToRad(lat1)) * Math.Cos(ToRad(lat2))
                * Math.Sin(dLon / 2) * Math.Sin(dLon / 2);
        var c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));
        return R * c;
    }

    private async Task SaveFavorite()
    {
        if (countryInfo == null) return;
        var label = countryInfo.Name.Common;
        favorites = await LocalStorage.GetItemAsync<List<string>>("favorites") ?? new();
        if (!favorites.Contains(label))
        {
            favorites.Add(label);
            await LocalStorage.SetItemAsync("favorites", favorites);
        }
        showFavorites = true;
        StateHasChanged();
    }
 private async Task AddCityFavorite(string city)
    {
        favorites = await LocalStorage.GetItemAsync<List<string>>("favorites") ?? new();
        if (!favorites.Contains(city))
        {
            favorites.Add(city);
            await LocalStorage.SetItemAsync("favorites", favorites);
            showFavorites = true;
            StateHasChanged();
        }
    }

    private async Task ToggleFavorites()
    {
        favorites = await LocalStorage.GetItemAsync<List<string>>("favorites") ?? new();
        showFavorites = !showFavorites;
        StateHasChanged();
    }

    private async Task LoadCountry(string name)
    {
        searchCountry = name;
        showFavorites = false;
        await SearchCountryOrCity();
    }

    private async Task RemoveFavorite(string fav)
    {
        favorites.Remove(fav);
        await LocalStorage.SetItemAsync("favorites", favorites);
        StateHasChanged();
    }

 private async Task LoadFavorites()
    {
        favorites = await LocalStorage.GetItemAsync<List<string>>("favorites") ?? new();
    }


    private async Task LoadCountry(string name)
    {
        searchCountry = name;
        await SearchCountry();
    }

    private async Task RemoveFavorite(string fav)
    {
        favorites.Remove(fav);
        await LocalStorage.SetItemAsync("favorites", favorites);
    }
 private string ExtractCountryCode(string countryName)
    {
        var map = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
        {
            {"United States", "US"}, {"United Kingdom", "GB"}, {"Ireland", "IE"},
            {"France","FR"}, {"Germany","DE"}, {"Canada","CA"}
        };
        return map.TryGetValue(countryName, out var code)
            ? code
            : countryName[..Math.Min(2, countryName.Length)].ToUpperInvariant();
    }
}

