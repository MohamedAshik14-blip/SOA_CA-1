@page "/tripplanner"
@using WeatherApp.Models
@using WeatherApp.Services
@inject IWeatherService WeatherService
@inject ICountryService CountryService
@inject CitySuggestionService CityService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject ILocationService LocationService 

<div class="app-container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>üåç Trip Planner</h2>
        <div>
            <input @bind="searchCountry" @bind:event="oninput" placeholder="Search country (e.g., France)" 
                   class="form-control d-inline-block" style="width:240px" />
            <button class="btn btn-primary ms-2" @onclick="SearchCountry">Search</button>
            <button class="btn btn-outline-secondary ms-2" @onclick="LoadFavorites">Favorites</button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    else if (loading)
    {
        <div class="d-flex align-items-center">
            <div class="spinner-border me-3" role="status"></div>
            <div>Loading trip info...</div>
        </div>
    }
    else if (countryInfo != null)
    {
        <div class="trip-card mb-3">
            <div class="d-flex justify-content-between">
                <div>
                    <h4>üè≥Ô∏è @countryInfo.Name.Common</h4>
                    <p class="mb-1">Region: @countryInfo.Region</p>
                    <p class="mb-1">Capital: @countryInfo.Capital?.FirstOrDefault()</p>
                    <p>Population: @String.Format("{0:N0}", countryInfo.Population)</p>
                </div>
                <div>
                    @if (!string.IsNullOrEmpty(countryInfo.Flags.Png))
                    {
                        <img src="@countryInfo.Flags.Png" alt="flag" width="100" class="rounded shadow-sm" />
                    }
                    <div class="mt-2">
                        <button class="btn btn-outline-success" @onclick="SaveFavorite">Save Favorite</button>
                    </div>
                </div>
            </div>

            <hr />

            <h5>üå§ Capital Weather (@capitalName)</h5>
            @if (currentWeather != null)
            {
                <div class="p-3 bg-light rounded">
                    <div class="fs-4">@currentWeather.TemperatureC.ToString("0.0")¬∞C</div>
                    <div>@currentWeather.Type ‚Äî @currentWeather.Description</div>
                    <div class="text-muted">@currentWeather.Date.ToString("f")</div>
                </div>
            }
            else
            {
                <div>No weather data available</div>
            }

            <hr />

            <h5>üìÖ 3-Day Forecast</h5>
            <div class="d-flex gap-3 flex-wrap">
                @foreach (var d in forecast)
                {
                    <div class="p-3 bg-light rounded shadow-sm text-center">
                        <div>@d.Date.ToString("ddd, MMM d")</div>
                        <div class="fs-5">@d.TemperatureC.ToString("0.0")¬∞C</div>
                        <div class="text-muted">@d.Type</div>
                    </div>
                }
            </div>

            <hr />

@code {
    private string searchCountry = "";
    private CountryInfo? countryInfo;
    private WeatherInfo? currentWeather;
    private List<WeatherInfo> forecast = new();
    private string? capitalName;
    private string? errorMessage;
    private bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        try
        {
           
            var location = await LocationService.GetUserLocationAsync();
            searchCountry = location.Country;

            
            await SearchCountry();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to get location: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task SearchCountry()
    {
        if (string.IsNullOrWhiteSpace(searchCountry)) return;
        loading = true;
        errorMessage = null;

        try
        {
            countryInfo = await CountryService.GetCountryInfoAsync(searchCountry);
            if (countryInfo == null)
            {
                errorMessage = "Country not found.";
                return;
            }

            capitalName = countryInfo.Capital?.FirstOrDefault();
            if (!string.IsNullOrEmpty(capitalName))
            {
                currentWeather = await WeatherService.GetCurrentWeatherAsync(capitalName);
                forecast = await WeatherService.GetForecastAsync(currentWeather.Latitude, currentWeather.Longitude);
            }

            if (!string.IsNullOrEmpty(countryInfo.Cca2))
                topCities = await CityService.GetTopCitiesAsync(countryInfo.Cca2);

            favorites = await LocalStorage.GetItemAsync<List<string>>("favorites") ?? new();
        }
        catch (Exception ex)
        {
            errorMessage = $"Search failed: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }


    private async Task LoadCountry(string name)
    {
        searchCountry = name;
        await SearchCountry();
    }

    private async Task RemoveFavorite(string fav)
    {
        favorites.Remove(fav);
        await LocalStorage.SetItemAsync("favorites", favorites);
    }
}
